trigger:
- main

variables:
  terraformVersion: '1.3.7'
  workingDirectory: '$(System.DefaultWorkingDirectory)/vms'
  azureSubscription: 'SC-Terraform-Azure' # Nome da Service Connection
  environment: 'prod'

pool:
  vmImage: 'ubuntu-latest'

steps:
# Instalação do Terraform
- task: TerraformInstaller@0
  displayName: 'Install Terraform $(terraformVersion)'
  inputs:
    terraformVersion: '$(terraformVersion)'

# Autenticação via App Registration
- task: AzureCLI@2
  displayName: 'Azure Login'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "##[section]Configurando credenciais do Terraform"
      export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
      export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
      export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
      export ARM_TENANT_ID=$(ARM_TENANT_ID)
      echo "Azure credentials configured"

# Comandos Terraform
- task: TerraformCLI@0
  displayName: 'Terraform Init'
  inputs:
    command: 'init'
    workingDirectory: '$(workingDirectory)'
    backendType: 'azurerm'
    backendServiceArm: '$(azureSubscription)'
    backendAzureRmResourceGroupName: 'RG02'
    backendAzureRmStorageAccountName: 'restorevmrg02'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraforn.tfstate'
    environmentServiceName: '$(azureSubscription)'

- task: TerraformCLI@0
  displayName: 'Terraform Plan'
  inputs:
    command: 'plan'
    workingDirectory: '$(workingDirectory)'
    commandOptions: '-out=tfplan -var-file=terraform.tfvars'
    environmentServiceName: '$(azureSubscription)'

- task: TerraformCLI@0
  displayName: 'Terraform Apply'
  inputs:
    command: 'apply'
    workingDirectory: '$(workingDirectory)'
    commandOptions: 'tfplan'
    environmentServiceName: '$(azureSubscription)'